Compte rendu TP2
Exercice 1
1. On peut appliquer (Borne supérieure - Borne inférieure) / 2 + 1 = 50 valeurs possibles pour r.
   Pour un pas de 0.5, nous aurons (100 - 1)/0.5 + 1 = 199 valeurs possibles.
2. En suivant le même raisonnement
   r : 100 valeurs possibles 
   c : 100 valeurs possibles 
   rad : 100racine(2) - 5 / 1 + 1 = ~137 valeurs possibles
   Nous aurons donc 100 * 100 * 137 = 1 370 000 cercles possibles.
3. En se basant sur les intervalles de la question précédente, le cercle associé au acc(1, 1, 1) est le cercle de centre (1, 1)
   car la première valeur pour r et c est 1 et de rayon 5 pixels car la première valeur de l'intervalle rad est 5.
   Quant au cercle associé au acc(10, 7, 30) :
   10e valeur discrète pour r => 10
    7e valeur discrète pour c => 7
    30e valeur discrète pour rad sachant que l'intervalle commence à 5 => 34
    Cela nous donne un cercle de centre (10, 7) et de rayon 34 pixels.

4. En inversant le procédé, on tombe donc sur la valeur la valeur suivante : acc(40, 40, 9).
NOTE : Peut être une incompréhension de la question mais j'ai testé comme ça
cpt = 0
for i in numpy.arange(5, 100, 1):
    cpt += 1
    print(str(i) + " " + str(cpt) + "e itération")

Exercice 2
Lors de la réalisation de cet exercice, nous avons rencontré plusieurs problèmes :
- Un des problèmes que nous avions rencontré et qui avait été mentionné en cours était celui de la difficulté à trouver les petits cercles à cause du vote qui favorisait les grands cercles.
Afin de pallier ce manque d'égalité pour les petits cercles de notre algorithme, il nous a fallu normaliser les votes pour pas que la quantité de pixels d'un cercle soit un facteur déterminant dans le vote.
Ainsi, pour chaque vote, celui ci était divisé par le rayon du cercle. Cela s'est avéré efficace puisque nous avons pu trouver les cercles plus petits des images (notamment coins.png).

- Nous avons eu des difficultés à trouver une solution générique pour chaque image. En particulier concernant l'image coins2.jpg qui contient beaucoup de bruits et sur laquelle nous n'avons pas trop réussi
à identifier les cercles de l'image en faisant varier les paramètres.
Outre cette image, nous avons réussi à trouver les cercles sur les autres images en faisant varier les paramètres dont notamment un nettoyage plus grand autour des top valeurs de l'accumulateur afin de
pallier le manque de précision de notre algorithme. Bien qu'il soit imprécis, cela nous a permis d'identifier à quelques pixels près tous les cercles des autres images autre que coins2.jpg.
(paramètres : seuil t de 0.3, N en fonction du nombre de cercle à détecter)


Exercice 3
1. La complexité de l'algorithme est de l'ordre de O(n^4) car nous effectuons nous parcourons les contours et tous les pixels de l'image (double boucle) afin de pouvoir faire les votes.
Nous itérons ensuite une dernière fois sur l'accumulateur afin de trouver les maximas locaux.